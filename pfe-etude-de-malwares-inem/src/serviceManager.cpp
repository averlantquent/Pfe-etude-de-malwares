/**
 * @file serviceManager.cpp
 * @author Damien HEURET
 * @brief This file can shutdown et start a service!
 * @version 0.1
 * @date 2022-01-03
 * 
 * @copyright Copyright (c) 2022
 * 
 */

#include "../include/serviceManager.h"

/**
 * @brief Construct a new Service Manager:: Service Manager object
 * @details This constructor opens Sync Breeze Enterprise's service as default
 */
ServiceManager::ServiceManager() {
    m_SCManager = OpenSCManager(NULL, NULL, SC_MANAGER_ALL_ACCESS);
    if (NULL == m_SCManager) 
    {
        std::cout << "OpenSCManager failed :" << GetLastError() << std::endl;
    }

    m_SCService = OpenService(m_SCManager, "Sync Breeze Enterprise", SC_MANAGER_ALL_ACCESS);
    if (NULL == m_SCService) 
    {
    std::cout << "OpenService  failed " << GetLastError() << std::endl;
    }
}

/**
 * @brief Construct a new Service Manager:: Service Manager object
 * @details Used to open a service by service's name
 * @param serviceName the name of the service to control
 */
ServiceManager::ServiceManager(std::string serviceName) {
    m_SCManager = OpenSCManager(NULL, NULL, SC_MANAGER_ALL_ACCESS);
    if (NULL == m_SCManager) 
    {
        std::cout << "OpenSCManager failed " << GetLastError() << std::endl;
    }

    m_SCService = OpenService(m_SCManager, serviceName.c_str(), SC_MANAGER_ALL_ACCESS);
    if (NULL == m_SCService) 
    {
        std::cout << "OpenService  failed " << GetLastError() << std::endl;
    }

}

/**
 * @brief Destroy the Service Manager:: Service Manager object
 * @details Close Handlers before destroying himself
 */
ServiceManager::~ServiceManager()
{
    CloseServiceHandle(m_SCService);
    CloseServiceHandle(m_SCManager);
}                                

/**
 * @brief Stop the service
 * 
 */
void ServiceManager::stopService() {
    checkStatus();
    // std::cout << "Stoping service..." << std::endl;
    int isFine = ControlService(m_SCService, SERVICE_CONTROL_STOP, &m_ServiceStatus);
    if (!isFine) {
        // std::cout << "ERREUR : Call GetLastError to get error number! " << GetLastError() << std::endl;
    }
}

/**
 * @brief Stop and Start the service
 * 
 */
void ServiceManager::restartService() {
    stopService();
    startService();
}

/**
 * @brief Start the service
 * 
 */
void ServiceManager::startService() {
    checkStatus();
    std::cout << "Starting service..." << std::endl;
    StartService(m_SCService, 0, NULL);
}

/**
 * @brief function to store the ss (ServiceStatus) in a structure for handling it
 * 
 */
void ServiceManager::checkStatus() {
    QueryServiceStatus(m_SCService, &m_ServiceStatus);
}
