#ifndef __SAVEPARSER_H_
#define __SAVEPARSER_H_

#include <iostream>
#include <string>
#include <fstream>
#include <sstream>
#include <cctype>
#include <algorithm>
#include "windows.h"

class SaveParser {
    public:
        SaveParser();
        int setup(bool _setup = false);
        void printConf(std::fstream &inputFile);
        void readWIP();
        void save();
        void inputParam(std::fstream &inputFile);
        void writeConf(std::fstream &outputFile);

        // GETTERS AND SETTERS
        void setOffset(unsigned int offset);
        unsigned int offset() const;
        void setJmpEspAdr(unsigned int jmpEspAdr);
        unsigned int jmpEspAdr() const;
        void setBadChars(const std::string &badChars);
        std::string badChars() const;
        void setSave(bool save);
        bool isSave() const;
        void setPort(int port);
        int port() const;
        void setIp(const std::string &ip);
        std::string ip() const;
        void setSNeedsRestart(bool sNeedsRestart);
        bool isSNeedsRestart() const;
        void setENeedsRestart(bool eNeedsRestart);
        bool isENeedsRestart() const;
        void setService(const std::string &service);
        std::string service() const;
        void setFilename(const std::string &filename);
        std::string filename() const;
        void setNarly(const std::string &narly);
        std::string narly() const;
        std::string version() const;
        void setVersion(const std::string &version);
        int getLastStepDone() const;
        void setLastStepDone(int lastStepDone);
        std::string convert_int_to_string_in_hex(int number);
        std::string getAttach() const;
        void setAttach(const std::string &attach);

        friend std::ostream &operator<<(std::ostream &os, const SaveParser &rhs);
        
    private:
        /*
        * This used to be modified by users in the properties.conf
        */
        std::string m_narly; // Path to Narly
        std::string m_filename; // Path to exec
        std::string m_version; // Optionnal information
        std::string m_service; // Service name
        std::string m_attach; // Service executable
        bool m_eNeedsRestart; // Does exec need restart ?
        bool m_sNeedsRestart; // Does serv need restart ?
        std::string m_ip; // IP to attack
        int m_port; // Port to attack
        bool m_save; // Do we save ?

        /*
        * This is WIP saves in case of interruption or just as a basic save for later
        */
        std::string m_badChars; // List des mauvais caracteres
        unsigned int m_jmpEspAdr; // Adresse pour jump esp
        unsigned int m_offset; // Offset pour écrire dans le registre
        int m_lastStepDone; // La dernière étape faite
};

#endif // __SAVEPARSER_H_
